# Expects variable:
# human:
#   username: str
#   fullname: str
#   uid: int
#   mailing_lists: [str]

# TODO try not to duplicate extra_zfs_properties here
# ===================================================
- name: Create storage dataset for human
  community.general.zfs:
    name: 'zroot/empt/human_storage/{{ human.username }}'
    state: present
    extra_zfs_properties:
      quota: '1G'
      reservation: '1G'

- name: Initialize zrep state on all datasets to be backed up
  ansible.builtin.include_role:
    name: zrep_init_dataset
  vars:
    zrep_init_dataset_dataset:
      key: 'zroot/empt/human_storage/{{ human.username }}'
      value:
        quota: '1G'
        reservation: '1G'
  when: start_fake_company_zrep_list.stdout | length > 0
# ===================================================

- name: Set owner and group permissions for the new storage dataset
  ansible.builtin.file:
    name: '/empt/human_storage/{{ human.username }}'
    state: directory
    mode: '1700'
    owner: '{{ human.uid }}'
    group: '{{ human.uid }}'

- name: Populate human-owned storage directories
  ansible.builtin.file:
    name: '/empt/human_storage/{{ human.username }}/{{ item }}'
    state: directory
    recurse: true
    mode: '1700'
    owner: '{{ human.uid }}'
    group: '{{ human.uid }}'
  loop:
    - home
    - mail/cur
    - mail/new
    - mail/tmp

- name: Query radicale UNIX system account UID
  ansible.builtin.user:
    name: radicale
  delegate_to: radicale
  register: new_human_radicale_system_account

- name: Populate human calendar/contacts directories
  ansible.builtin.file:
    name: '/empt/human_storage/{{ human.username }}/diary/{{ item }}'
    state: directory
    recurse: true
    mode: '1700'
    owner: '{{ new_human_radicale_system_account.uid }}'
    group: '{{ new_human_radicale_system_account.uid }}'
  loop:
    - calendar
    - contacts
    - journal
    - todo

- name: Initialize radicale properties for each new collection
  ansible.builtin.template:
    src: 'radicale/{{ item }}/Radicale.props.json.j2'
    dest: '/empt/human_storage/{{ human.username }}/diary/{{ item }}/.Radicale.props'
    mode: '0600'
    owner: '{{ new_human_radicale_system_account.uid }}'
    group: '{{ new_human_radicale_system_account.uid }}'
  loop:
    - calendar
    - contacts
    - journal
    - todo

- name: Create login-incapable unix accounts for the human in the required hosts
  ansible.builtin.user:
    name: '{{ human.username }}'
    comment: '{{ human.fullname }}'
    home: '/home/{{ human.username }}'
    create_home: false
    uid: '{{ human.uid }}'
    shell: /usr/sbin/nologin
  delegate_to: '{{ item }}'
  loop:
    # TODO do I need cifs here?
    - cifs
    - mail

- name: Create missing nullfs mountpoint for the home directory in cifs
  ansible.builtin.file:
    name: '/home/{{ human.username }}'
    state: directory
    recurse: true
    mode: '1700'
    owner: '{{ human.uid }}'
    group: '{{ human.uid }}'
  delegate_to: cifs

- name: Create missing nullfs mountpoint for Maildir
  ansible.builtin.file:
    name: '/home/{{ human.username }}/mail'
    state: directory
    recurse: true
    mode: '1700'
    owner: '{{ human.uid }}'
    group: '{{ human.uid }}'
  delegate_to: mail

# TODO can we change wsgi-kerberos to return REMOTE_USER=<username> instead of
# REMOTE_USER=<username>@<REALM>?
- name: Create missing nullfs mountpoint for radicale collections
  ansible.builtin.file:
    name: '/usr/local/share/radicale/collection-root/{{ human.username }}@{{ org_domain | upper }}'
    state: directory
    recurse: true
    mode: '1700'
    owner: '{{ new_human_radicale_system_account.uid }}'
    group: '{{ new_human_radicale_system_account.uid }}'
  delegate_to: radicale

- name: Add human home directory nullfs mount to cifs jail
  ansible.posix.mount:
    fstab: /empt/etc/cifs/fstab
    src: '/empt/human_storage/{{ human.username }}/home'
    path: '/empt/jails/cifs/home/{{ human.username }}'
    fstype: nullfs
    opts: rw
    state: mounted

- name: Add Maildir nullfs mount to mail jail
  ansible.posix.mount:
    fstab: /empt/etc/mail/fstab
    src: '/empt/human_storage/{{ human.username }}/mail'
    path: '/empt/jails/mail/home/{{ human.username }}/mail'
    fstype: nullfs
    opts: rw
    state: mounted

- name: Nullfs mount diary collections to radicale jail
  ansible.posix.mount:
    fstab: /empt/etc/radicale/fstab
    src: '/empt/human_storage/{{ human.username }}/diary'
    path: '/empt/jails/radicale/usr/local/share/radicale/collection-root/{{ human.username }}@{{ org_domain | upper }}'
    fstype: nullfs
    opts: rw
    state: mounted

# TODO a lot of bugs with Heimdal's `get` and `list` commands, fix them.
- name: Check which user principals are missing
  ansible.builtin.command: 'kadmin --local get --short {{ human.username }}'
  delegate_to: kerberos
  register: new_human_user_principal_exists
  failed_when: new_human_user_principal_exists.rc >= 2
  changed_when: false

- name: Add new kerberos principal
  ansible.builtin.command: 'kadmin --local add --password={{ human.username }} --use-defaults {{ human.username }}'
  delegate_to: kerberos
  when: '"Principal does not exist" in new_human_user_principal_exists.stderr'
  register: setup_jail_kerberos_add_user_principals_output
  changed_when: setup_jail_kerberos_add_user_principals_output.rc == 0

- name: Subscribe to selected mailing lists
  ansible.builtin.command: '/usr/local/bin/mlmmj-sub -L /var/spool/mlmmj/{{ item }} -a {{ human.username }}@{{ org_domain }} -c -f -s'
  loop: '{{ human.mailing_lists }}'
  delegate_to: mail
  register: mlmmj_sub_output
  changed_when: mlmmj_sub_output.rc == 0
