- name: Install irc required ports
  ansible.builtin.command: pkg install -y ngircd soju kimchi tlstunnel
  changed_when: true

- name: Query new soju user
  ansible.builtin.user:
    name: soju
  register: setup_jail_irc_soju_user

- name: Create soju DB directory in jailhost
  ansible.builtin.file:
    path: /empt/synced/rw/sojudb
    state: directory
    mode: '0700'
    owner: '{{ setup_jail_irc_soju_user.uid }}'
    group: '{{ setup_jail_irc_soju_user.uid }}'
  delegate_to: jailhost

- name: Create soju DB mountpoint
  ansible.builtin.file:
    path: /var/db/soju
    state: directory
    mode: '0700'
    owner: soju
    group: soju

- name: Add soju DB nullfs mount to irc jail
  ansible.posix.mount:
    fstab: /empt/synced/rw/fstab.d/irc.fstab
    src: /empt/synced/rw/sojudb
    path: /empt/jails/irc/var/db/soju
    fstype: nullfs
    opts: rw
    state: mounted
  delegate_to: jailhost

- name: Configure ngIRCd backend IRC server
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '/usr/local/etc/ngircd/{{ item.path | replace(".j2", "") }}'
    mode: '0644'
    # TODO figure out better validation
    # validate: ngircd --config %s --configtest > /dev/null
  with_community.general.filetree: '{{ "templates/ngircd" }}'
  when: item.state == 'file'

- name: Configure soju frontend IRC bouncer
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '/usr/local/etc/soju/{{ item.path | replace(".j2", "") }}'
    mode: '0644'
  with_community.general.filetree: '{{ "templates/soju" }}'
  when: item.state == 'file'

- name: Configure kimchi backend HTTP reverse proxy
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '/usr/local/etc/kimchi/{{ item.path | replace(".j2", "") }}'
    mode: '0644'
  with_community.general.filetree: '{{ "templates/kimchi" }}'
  when: item.state == 'file'

- name: Configure tlstunnel frontent TLS reverse proxy
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: '/usr/local/etc/tlstunnel/{{ item.path | replace(".j2", "") }}'
    mode: '0644'
  with_community.general.filetree: '{{ "templates/tlstunnel" }}'
  when: item.state == 'file'

- name: Configure soju PAM service to use krb5
  ansible.builtin.copy:
    content: |
      auth required pam_krb5.so no_user_check
      account sufficient pam_permit.so
    # TODO change this to 'soju' when it supports specifying service name
    dest: /etc/pam.d/login
    mode: '0644'
    owner: root
    group: wheel

- name: Ensure keytab and TLS certs can only be read by soju
  ansible.builtin.file:
    path: '{{ item }}'
    mode: '0400'
    owner: soju
    group: soju
  loop:
    - /etc/krb5.keytab
    - /etc/ssl/irc.crt.pem
    - /etc/ssl/irc.key.pem

# TODO somehow package gamja without relying on NPM, currently pre-building
- name: Ensure WWWDIR exists
  ansible.builtin.file:
    path: /usr/local/www
    state: directory
    mode: '0755'
    owner: root
    group: wheel

- name: Copy pre-built gamja IRC webclient to location
  ansible.builtin.copy:
    src: gamja
    dest: /usr/local/www/
    # TODO only webserver user should be able to access this
    mode: '0755'
    owner: root
    group: wheel

- name: Configure kimchi and tlstunnel to run as the root user
  community.general.sysrc:
    name: '{{ item }}_user'
    value: root
  loop:
    - kimchi
    - tlstunnel

- name: Configure kimchi and tlstunnel to run as the wheel group
  community.general.sysrc:
    name: '{{ item }}_group'
    value: wheel
  loop:
    - kimchi
    - tlstunnel

- name: Enable and start all IRC services
  ansible.builtin.service:
    name: '{{ item }}'
    enabled: true
    state: started
  loop:
    - ngircd
    - soju
    - kimchi
    - tlstunnel
